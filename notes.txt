https://github.com/iden3/snarkjs

â€‹
In summary, zk-SNARK proofs are a specific type of zero-knowledge proofs that allow you to prove that you know a set of signals, witness, that match all the constraints of a circuit without revealing any of the signals except the public inputs and the outputs.

snarkjs:
This is a JavaScript and Pure Web Assembly implementation of zkSNARK and PLONK schemes. It uses the Groth16 Protocol (3 point only and 3 pairings) and PLONK.

circom is a compiler written in Rust for compiling circuits written in the circom language. The compiler outputs the representation of the circuit as constraints and everything needed to compute different ZK proofs.

circom allows programmers to define the constraints that define the arithmetic circuit. All constraints must be of the form A*B + C = 0, where A, B and C are linear combinations of signals.

okay so: We want to prove that we know two integers whose product is 33, without revealing those integers:

template Multiplier2() {
    signal input a;
    signal input b;
    signal output c;
    c <== a*b;
 }
 component main = Multiplier2();

1. write constraints in circom language
2. compile the circuit to get a system of arithmetic equations representing those constraints
3. Before creating the proof, we need to calculate all the signals of the circuit that match all the constraints of the circuit. For that, we will use the Wasm module generated by circom that helps to do this job. Using the generated Wasm binary and three JavaScript files, we simply need to provide a file with the inputs and the module will execute the circuit and calculate all the intermediate signals and the output. The set of inputs, intermediate signals and output is called witness.

After compiling the circuit and running the witness calculator with an appropriate input, we will have a file with extension .wtns that contains all the computed signals and, a file with extension .r1cs that contains the constraints describing the circuit. Both files will be used to create our proof.

Now, we will use the snarkjs tool to generate and validate a proof for our input. In particular, using the multiplier2, we will prove that we are able to provide the two factors of the number 33. That is, we will show that we know two integers a and b such that when we multiply them, it results in the number 33.

4. Once the witness is computed and the trusted setup is already executed, we can generate a zk-proof associated to the circuit and the witness:
proof.json: it contains the proof.
public.json: it contains the values of the public inputs and outputs.

5. verify proof:
A valid proof not only proves that we know a set of signals that satisfy the circuit, but also that the public inputs and outputs that we use match the ones described in the public.json file.

